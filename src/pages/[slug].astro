---
import type { InferGetStaticPropsType } from 'astro'
import Layout from '../layouts/Layout.astro'
import ArticleHeader from '../components/article/ArticleHeader.astro'
import ArticleBody from '../components/article/ArticleBody.astro'
import ArticleFeaturedImage from '../components/article/ArticleFeaturedImage.astro'
import ArticleRelated from '../components/article/ArticleRelated.astro'
import Post from '../components/Post.astro'
import Page from '../components/Page.astro'
import { getPosts, getPages, getSettings } from '../lib/api'
import { map } from 'astro/zod'
import { formatDate } from '../utils/dateConvert'

export async function getStaticPaths(){
	const [posts, pages, settings] = await Promise.all([getPosts({}), await getPages({}), await getSettings()]);
	posts.forEach(post => {
		post.type = "post"; // add a string value to the "type" field
	});
	pages.forEach(page => {
		page.type = "page"; // add a string value to the "type" field
	});

	const allPosts = [...posts, ...pages];

	return allPosts.map((post) => ({
		params: { slug: post.slug },
		props: { post, posts, settings },
	}));
}

export type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const {post, posts, settings} = Astro.props as Props;
const isPost = post.type === `post`
let prevPost, nextPost, relatedPosts = {}

if (isPost) {
	prevPost = (await getPosts({filter: `published_at:<='${formatDate(post.published_at)}'+slug:-${post.slug}+tag:-hash-portfolio+tag:-hash-podcast+tag:-hash-custom-kusi-doc`, limit: "1", order: "published_at DESC"}))[0]
	nextPost = (await getPosts({filter: `published_at:>'${formatDate(post.published_at)}'+slug:-${post.slug}+tag:-hash-portfolio+tag:-hash-podcast+tag:-hash-custom-kusi-doc`, limit: "1", order: "published_at ASC"}))[0]
	relatedPosts = await getPosts({filter: `slug:-${post.slug}+primary_tag:'${post.primary_tag.slug}'+tag:-hash-portfolio+tag:-hash-podcast+tag:-hash-custom-kusi-doc`, limit: "6", order: "published_at DESC"})
}

---

<Layout footer={true} bodyClass="is-article" isPost={isPost}>
	{
    	isPost ? (
    		<Post
        		post={post}
        		nextPost={nextPost}
        		prevPost={prevPost}
        		relatedPosts={relatedPosts}
      		/>
    	) : (
    		<Page page={post} />
    	)
	}
</Layout>