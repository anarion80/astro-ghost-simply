---
import { t } from "@utils/use-lang";
---

<a
    href="javascript:;"
    role="button"
    aria-label="Toggle Search"
    class="js-modal-button godo-tracking button is-white mr-2"
    data-target="modal-search"
    aria-haspopup="true"
    data-event-category="Header"
    data-event-action="Search"
    data-event-label="Click"
    data-event-non-interaction="true"
>
    <svg class="icon icon--search"><use xlink:href="#icon-search"></use></svg>
</a>
<div
    id="modal-search"
    class="js-modal modal search flex flex-col flex-wrap items-center fixed inset-0 z-50"
>
    {/* {!-- Bg --}} */}
    <div class="absolute inset-0 bg-modal bg-opacity-60 js-modal-close"></div>

    {/* {!-- Close --} */}
    <div
        class="button is-dark is-circle absolute js-modal-close z-3"
        style={{ top: `5px`, right: `5px` }}
    >
        <svg class="icon"><use xlink:href="#icon-close"></use></svg>
    </div>

    <div class="modal-content relative z-2 max-w-2xl w-full pt-vw6 px-5 pb-5">
        <div class="search-wrap bg-blank rounded-md shadow-sm">
            {/* {!-- search form --} */}
            <form class="search-form flex w-full items-center text-base px-3">
                <svg class="icon icon--search"
                    ><use xlink:href="#icon-search"></use></svg
                >
                <input
                    id="search-field"
                    class="w-full is-medium"
                    type="text"
                    placeholder={`${t(`Search`)}...`}
                    aria-label="Search box"
                />
            </form>
            {/* {!-- show a message to the user if there is no post --} */}
            <span
                class="js-search-message search-message text-sm p-2 text-gray-500 leading-none hidden"
                >{t(`No results found`)}</span
            >
            {/* {!-- Search results --} */}
            <div
                id="search-results"
                class="search-results mx-auto w-full leading-none"
            >
            </div>
        </div>
        {/* {!-- showing the function keys --} */}
        <div
            class="justify-end text-xs leading-none text-white mt-2 hidden md:flex opacity-80"
        >
            <div class="">
                <span class="p-1 rounded bg-orange inline-block">↑</span
                >&nbsp;<span class="p-1 rounded bg-orange inline-block">↓</span
                >&nbsp;{t(`Navigate up/down`)}
            </div>
            <div class="ml-3">
                <span class="p-1 rounded bg-orange inline-block">Enter</span
                >&nbsp;{t(`Go to article`)}
            </div>
            <div class="ml-3">
                <span class="p-1 rounded bg-orange inline-block">Esc</span
                >&nbsp;{t(`Close search`)}
            </div>
        </div>
    </div>
</div>

<script src="../utils/ghostSearch.js"></script>
<script>
    import siteConfig from "../utils/siteConfig";
    import SearchinGhost from "@utils/ghostSearch.js";

    (function (document) {
        const $body = document.body;
        const $input = document.querySelector("#search-field");
        const $results = document.querySelector("#search-results");
        const $searchMessage = document.querySelector(".js-search-message");

        const classIsActive = `is-active`;
        const rootEl = document.documentElement;
        const documentBody = document.body;
        const searchSettings = siteConfig.searchSettings;

        let allSearchLinksLength = 0;

        let searchResultsHeight = {
            outer: 0,
            scroll: 0,
        };

        // Show icon search in header
        document
            .querySelector("a[data-target=modal-search]")
            .classList.remove("hidden");

        const afterDisplaySearch = results => {
            // Active class to link search
            if (!$results) {
                return;
            }
            searchResultActive();

            allSearchLinksLength = results.length;

            searchResultsHeight = {
                outer: $results.offsetHeight,
                scroll: $results.scrollHeight,
            };

            if (results.total === 0 && $input.value !== ``) {
                $searchMessage.classList.remove(`hidden`);
                $body.removeEventListener(`keydown`, mySearchKey);
            } else {
                $searchMessage.classList.add(`hidden`);
                $body.addEventListener(`keydown`, mySearchKey);
            }
        };

        /* Customized search data
  /* ---------------------------------------------------------- */

        const mySearchSettings = {
            onFetchStart: () => document.body.classList.add("is-loading"),
            onFetchEnd: () =>
                setTimeout(() => {
                    document.body.classList.remove("is-loading");
                }, 4000),
            onSearchEnd: function (results) {
                afterDisplaySearch(results);
            },
        };

        // join user settings
        Object.assign(mySearchSettings, searchSettings);

        /* when the Enter key is pressed
  /* ---------------------------------------------------------- */
        function enterKey() {
            const link = $results.querySelector(`a.${classIsActive}`);
            link && link.click();
        }

        /* Appending the active class to the search link
  /* ---------------------------------------------------------- */
        function searchResultActive(index, upDown) {
            index = index || 0;
            upDown = upDown || "up";

            const allSearchLinks = $results.querySelectorAll(`a`);

            // Return if there are no results
            if (!allSearchLinks.length) return;

            // Remove All class Active
            allSearchLinks.forEach(element =>
                element.classList.remove(classIsActive)
            );

            // Add class active
            allSearchLinks[index].classList.add(classIsActive);

            // Scroll for results box
            const linkOffSetTop = allSearchLinks[index].offsetTop;
            let scrollPosition = 0;

            upDown === "down" && linkOffSetTop > searchResultsHeight.outer / 2
                ? (scrollPosition =
                      linkOffSetTop - searchResultsHeight.outer / 2)
                : upDown === "up" &&
                  (scrollPosition =
                      linkOffSetTop <
                      searchResultsHeight.scroll - searchResultsHeight.outer / 2
                          ? linkOffSetTop - searchResultsHeight.outer / 2
                          : searchResultsHeight.scroll);

            $results.scrollTo(0, scrollPosition);
        }

        /* Reacted to the up or down keys
  /* ---------------------------------------------------------- */
        function arrowKeyUpDown(keyNumber) {
            let upDown;
            let indexTheLink = 0;

            const resultActive = $results.querySelector(`.is-active`);

            if (resultActive) {
                indexTheLink = [].slice
                    .call(resultActive.parentNode.children)
                    .indexOf(resultActive);
            }

            $input.blur();

            // 38 === UP
            if (keyNumber === 38) {
                upDown = "up";

                if (indexTheLink <= 0) {
                    $input.focus();
                    indexTheLink = 0;
                } else {
                    indexTheLink -= 1;
                }
            } else {
                upDown = "down";

                if (indexTheLink >= allSearchLinksLength - 1) {
                    indexTheLink = 0;
                } else {
                    indexTheLink += 1;
                }
            }

            searchResultActive(indexTheLink, upDown);
        }

        /* Adding functions to the keys
  /* ---------------------------------------------------------- */
        function mySearchKey(e) {
            const keyNumber = e.keyCode;

            /**
             * 38 => Up
             * 40 => down
             * 13 => enter
             **/

            if (keyNumber === 13) {
                $input.blur();
                enterKey();
            } else if (keyNumber === 38 || keyNumber === 40) {
                arrowKeyUpDown(keyNumber);
                e.preventDefault();
            }
        }

        /* Search
  /* ---------------------------------------------------------- */
        /* eslint-disable no-new */
        new SearchinGhost(mySearchSettings);

        /*  Toggle modal
  /* ---------------------------------------------------------- */
        const simplyModal = () => {
            const getAll = (selector, parent = document) =>
                Array.prototype.slice.call(
                    parent.querySelectorAll(selector),
                    0
                );
            const $modals = getAll(".js-modal");
            const $modalButtons = getAll(".js-modal-button");
            const $modalCloses = getAll(".js-modal-close");

            // Modal Click Open
            if (!$modalButtons.length) return;
            $modalButtons.forEach($el =>
                $el.addEventListener("click", () =>
                    openModal($el.dataset.target)
                )
            );

            // Modal Click Close
            if (!$modalCloses.length) return;
            $modalCloses.forEach(el =>
                el.addEventListener("click", () => closeModals())
            );

            const openModal = target => {
                documentBody.classList.remove("has-menu");
                const $target = document.getElementById(target);
                rootEl.classList.add("overflow-hidden");
                $target.classList.add("is-active");

                if (target === "modal-search") {
                    document.querySelector("#search-field").focus();
                }
            };

            const closeModals = () => {
                rootEl.classList.remove("overflow-hidden");
                $modals.forEach($el => $el.classList.remove("is-active"));
            };

            document.addEventListener("keydown", function (event) {
                const e = event || window.event;
                if (e.keyCode === 27) {
                    closeModals();
                    // closeDropdowns()
                }
            });
        };

        simplyModal();
    })(document);
</script>
